import axios from 'axios'
import * as fs from 'node:fs/promises';
import { cveStructureValidator } from './validator/validate.js';

/**
 * The function takes as input all the necessary parameters and first reserves CVE ID
 * Afterwards it publishes the CVE under the ID to the specified instance. 
 */
async function reserveCveAndPublish(cveDefinitionPath, baseUrl, apiKey, apiUser, apiOrg) {
    if (typeof(cveDefinitionPath) === 'undefined') {
      throw Error(`Can not read the CVE JSON file`)
    }

    console.debug(`cveDefinitionPath: ${cveDefinitionPath}, apiOrg: ${apiOrg}, apiUser: ${apiUser}, apiKey: ${apiKey}`);
    
    const headers = {
        'CVE-API-ORG': apiOrg,
        'CVE-API-USER': apiUser,
        'CVE-API-KEY': apiKey,
    }
    let cveId = await reserveCveId(baseUrl, headers)
    if (cveId === null) {
      throw Error('Reserve a CVE ID from MITRE test instance first')
    }
    await publishCve(cveId, cveDefinitionPath, baseUrl, headers); 
}

/**
 * Reserve CVE Id for one CVE. 
 * 
 * @param {*} headers Information necessary to authenticate and process the CVE
 * @returns 
 */
const reserveCveId = async (baseUrl, headers) => {
    const year = new Date().getFullYear()
    const orgName = `Zowe`
    const url = `${baseUrl}api/cve-id?amount=1&cve_year=${year}&short_name=${orgName}`
    console.debug(`Url to reserve CVE Id: ${url}`);
    
    try {
        const reservedCveId = await axios.post(url, null, { headers })
        return reservedCveId.data.cve_ids[0].cve_id
    } catch (e) {
        throw Error(`Error: Failed to reserve CVE ID: ${e}`)
    }
}

/**
 * Publish cve to the specified instance of the Mitre CVE website. 
 * 
 * @param {*} reservedCveId Cve that was already reserved and should be used for this specific CVE
 * @param {*} cveDefinitionPath Path to the JSON file containing the definition of the CVE
 * @param {*} headers Information necessary to authenticate and process the CVE
 * @returns 
 */
const publishCve = async (reservedCveId, cveDefinitionPath, baseUrl, headers) => {
    const url = `${baseUrl}api/cve/${reservedCveId}/cna`
    console.debug(`CVE Id to create ${reservedCveId} resulting URL: ${url}`);

    try {
        const filePath = new URL(cveDefinitionPath, import.meta.url);
        let fileContent = await fs.readFile(filePath, 'utf8')
        let cveContent = JSON.parse(fileContent)
        
        await cveStructureValidator(cveContent);

        const sendData = await axios.post(url, cveContent, { headers, setTimeout: 90000 })
        
        console.log(`CVE Id is available to see here: ${baseUrl}api/cve/${reservedCveId}`);
        return sendData.data.message

    } catch (e) {
        throw Error(`Error: Failed to upload CVE data to MITRE test instance: ${e.message}`)
    }
}

export { reserveCveAndPublish, publishCve }