import axios from 'axios'
import * as fs from 'node:fs/promises';

/**
 * The function takes as input all the necessary parameters and first reserves CVE ID
 * Afterwards it publishes the CVE under the ID to the specified instance. 
 */
async function reserveCveAndPublish(cveDefinitionPath, apiOrg, apiUser, apiKey) {
    const headers = {
        'CVE-API-ORG': apiOrg,
        'CVE-API-USER': apiUser,
        'CVE-API-KEY': apiKey,
    }
    let cveId = await reserveCveId(headers)
    if (cveId === null) {
        throw Error('Reserve a CVE ID from MITRE test instance first')
    }
    await publishCve(cveId, cveDefinitionPath, headers); 
}

/**
 * Reserve CVE Id for one CVE. 
 * 
 * @param {*} headers Information necessary to authenticate and process the CVE
 * @returns 
 */
const reserveCveId = async (headers) => {
    const year = new Date().getFullYear()
    const orgName = `Zowe`
    const url = `https://cveawg-test.mitre.org/api/cve-id?amount=1&cve_year=${year}&short_name=${orgName}`
    
    try {
        const reservedCveId = await axios.post(url, null, { headers })
        return reservedCveId.data.cve_ids[0].cve_id
    } catch (e) {
        console.error(`Error: Failed to reserve CVE ID: ${e}`)
    }
}

/**
 * Publish cve to the specified instance of the Mitre CVE website. 
 * 
 * @param {*} reservedCveId Cve that was already reserved and should be used for this specific CVE
 * @param {*} cveDefinitionPath Path to the JSON file containing the definition of the CVE
 * @param {*} headers Information necessary to authenticate and process the CVE
 * @returns 
 */
const publishCve = async (reservedCveId, cveDefinitionPath, headers) => {
    const url = `https://cveawg-test.mitre.org/api/cve/${reservedCveId}/cna`

    try {
        fileContent = await fs.readFile(cveDefinitionPath, 'utf8')
        jsonData = JSON.parse(fileContent)
    
        // TODO: Validate the data. 

        const sendData = await axios.post(url, jsonData, { headers, setTimeout: 90000 })
        return sendData.data.message

    } catch (e) {
        throw Error(`Error: Failed to upload CVE data to MITRE test instance: ${e.message}`)
    }
}

export { reserveCveAndPublish, publishCve }