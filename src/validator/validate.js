import Ajv from 'ajv'
import addformats from 'ajv-formats'
import * as fs from 'node:fs/promises';

/**
 * Load schema stored in the repository and verify the content of the CVE file
 * against the schema. 
 * 
 * @param {JSON} cveContent The CVE to be validated.
 * @returns Nothing or list of errors found during the validation. 
 */
const loadSchemaAndValidateCve = async (cveContent) => {
  let schema = await fs.readFile('./schema.json')
  const ajv = new Ajv({ allErrors: true })
  addformats(ajv)
  const validate = ajv.compile(schema)
  const isValid = await validate(cveContent)
  if (!isValid) {
    return (validate.errors);
  }
  return;
}

/**
 * Verifies that the fileContent exists and after the validation
 * collects the error mesages if there are any. 
 * 
 * @param {JSON} cveContent The CVE to be validated
 */
const cveStructureValidator = async (cveContent) => {
  if (typeof(cveContent) === 'undefined') {
    throw Error(`Can not read the CVE JSON file`)
  }

  const errors = await loadSchemaAndValidateCve(cveData)
  if (errors) {
    const errorMessages = errors.map((error) => {
      return `At path ${error.instancePath} ${error.message}`;
    });

    const errorMessage = errorMessages.join('\n');
    console.log(errorMessage)

    throw Error(`Invalid\n ${errorMessage}`)
  } else {
    console.log('JSON validated, CVE data is in specified structure and contains all the necessary');
  }
}

export { cveStructureValidator }